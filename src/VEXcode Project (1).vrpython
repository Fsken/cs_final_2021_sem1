{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr_robot import *\n\ndrivetrain = Drivetrain()\nmagnet = Electromagnet(\"magnet\", 0)\npen = Pen()\nbrain = Brain()\nleft_bumper = Bumper(\"leftBumper\", 1)\nright_bumper = Bumper(\"rightBumper\", 2)\ndistance = Distance()\nfront_eye = EyeSensor(\"fronteye\", 3)\ndown_eye = EyeSensor(\"downeye\", 4)\nlocation = Location()\n#endregion VEXcode Generated Robot Configuration\n\n\n\nbinaryNumber=-1\nbinaryCode=[0,0,0,0,0,0,0,0]\ndecimalCode=0\ncolumn=0\ncode1=0\ncode2=0\ncode3=0\ncode4=0\ncode5=0\nfinalCode=\"yo\"\n\n\n\ndef when_started1():\n\n    def conversion():\n        global decimalCode\n        if binaryCode[0]==1:\n            decimalCode+=1\n        if binaryCode[1]==1:\n            decimalCode+=2\n        if binaryCode[2]==1:\n            decimalCode+=4\n        if binaryCode[3]==1:\n            decimalCode+=8\n        if binaryCode[4]==1:\n            decimalCode+=16\n        if binaryCode[5]==1:\n            decimalCode+=32\n        if binaryCode[6]==1:\n            decimalCode+=64\n        if binaryCode[7]==1:\n            decimalCode+=128\n\n    def turnOdd():\n        global binaryNumber\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        drivetrain.drive_for(FORWARD, 200, MM)\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        binaryNumber=-1\n        pain()\n\n    def turnEven():\n        global binaryNumber\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        drivetrain.drive_for(FORWARD, 200, MM)\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        binaryNumber=-1\n        pain()\n\n    \n\n    def assignment():\n        global column\n        global decimalCode\n        global binaryNumber\n        global code1\n        global code2\n        global code3\n        global code4\n        global code5\n        brain.print(\"\\n\")\n        column+=1\n        brain.print(column)\n        brain.print(\"\\n\")\n        conversion()\n        brain.print(decimalCode)\n        brain.print(\"\\n\")\n        if column==2:\n            decimalCode=0\n        if column==4:\n            decimalCode=0\n        if column==6:\n            decimalCode=0\n        if column==8:\n            decimalCode=0\n        if column==1:\n            code1=decimalCode\n            decimalCode=0\n        if column==3:\n            code2=decimalCode\n            decimalCode=0     \n        if column==5:\n            code3=decimalCode\n            decimalCode=0\n        if column==7:\n            code4=decimalCode\n            decimalCode=0\n        if column==9:\n            code5=decimalCode\n            decimalCode=0\n        if column==1:\n            turnOdd()\n        if column==3:\n            turnOdd()\n        if column==5:\n            turnOdd()\n        if column==7:\n            turnOdd()\n        if column==2:\n            turnEven()\n        if column==4:\n            turnEven()\n        if column==6:\n            turnEven()\n        if column==8:\n            turnEven()\n        \n           \n        if column==9:\n            finalCode=(chr(code1)+chr(code2)+chr(code3)+chr(code4)+chr(code5))\n            brain.print(finalCode)\n        \n\n\n\n    def count():\n        global binaryNumber\n        binaryNumber+=1\n\n\n    def check():\n        wait(0.5, SECONDS)\n        if  down_eye.detect(GREEN):\n            count()\n            binaryCode[binaryNumber]=1\n            brain.print(binaryCode[binaryNumber])\n        elif down_eye.detect(BLUE):\n            count()\n            binaryCode[binaryNumber]=0\n            brain.print(binaryCode[binaryNumber])\n\n\n    \n    def pain():\n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n  \n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n\n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n\n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n\n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n\n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n    \n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n   \n        drivetrain.drive_for(FORWARD, 200, MM)\n        check()\n        assignment()\n   \n\n\n    wait(5, MSEC)\n    pain()\n\n\n\n\n    \n\n    \n\n   \n\n    \n\n  \n\n            \n\n\n\n    \n\n\n    \n\n    \n       \n    \n\n    \n\n\n        \n        \n \n\n   \n\n\n\n\n\n\nvr_thread(when_started1)\n\n\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","playground":"EncodedMessage","robotModel":"vr"}